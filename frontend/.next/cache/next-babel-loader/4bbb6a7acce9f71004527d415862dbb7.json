{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nexport default function useForm(initial = {}) {\n  // create a state object for uor inputs\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n  useEffect(() => {\n    // This function run when the things we are\n    // watching change\n    setInputs(initial);\n  }, [initial]);\n\n  function handleChange(e) {\n    let {\n      type,\n      name,\n      value\n    } = e.target; // change input for price in number type\n\n    if (type === 'number') {\n      value = parseInt(value);\n    } // for files input\n\n\n    if (type === 'file') {\n      [value] = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  } // reset to default\n\n\n  function resetForm() {\n    setInputs(initial);\n  } // clear form\n\n\n  function clearForm() {\n    // set values in entries array to empty string, after create object from new entries(empty values)\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n    setInputs(blankState);\n  } // return the things we want to surface from this custom hook\n\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}","map":{"version":3,"sources":["/Volumes/Files/Learning/React/Advanced-React-master/sick-fits/frontend/lib/useForm.js"],"names":["useEffect","useState","useForm","initial","inputs","setInputs","handleChange","e","type","name","value","target","parseInt","files","resetForm","clearForm","blankState","Object","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA+B;AAC5C;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC;AAGAH,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAK,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD,GAJQ,EAIN,CAACA,OAAD,CAJM,CAAT;;AAMA,WAASG,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAwBH,CAAC,CAACI,MAA9B,CADuB,CAEvB;;AACA,QAAIH,IAAI,KAAK,QAAb,EAAuB;AACrBE,MAAAA,KAAK,GAAGE,QAAQ,CAACF,KAAD,CAAhB;AACD,KALsB,CAOvB;;;AACA,QAAIF,IAAI,KAAK,MAAb,EAAqB;AACnB,OAACE,KAAD,IAAUH,CAAC,CAACI,MAAF,CAASE,KAAnB;AACD;;AAEDR,IAAAA,SAAS,iCAEJD,MAFI;AAGP,OAACK,IAAD,GAAQC;AAHD,OAAT;AAKD,GA5B2C,CA8B5C;;;AACA,WAASI,SAAT,GAAqB;AACnBT,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD,GAjC2C,CAmC5C;;;AACA,WAASY,SAAT,GAAqB;AACnB;AACA,UAAMC,UAAU,GAAGC,MAAM,CAACC,WAAP,CACjBD,MAAM,CAACE,OAAP,CAAef,MAAf,EAAuBgB,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMX,KAAN,CAAD,KAAkB,CAACW,GAAD,EAAM,EAAN,CAA7C,CADiB,CAAnB;AAGAhB,IAAAA,SAAS,CAACW,UAAD,CAAT;AACD,GA1C2C,CA4C5C;;;AACA,SAAO;AACLZ,IAAAA,MADK;AAELE,IAAAA,YAFK;AAGLQ,IAAAA,SAHK;AAILC,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport default function useForm(initial = {}) {\n  // create a state object for uor inputs\n  const [inputs, setInputs] = useState(initial);\n\n  \n  useEffect(() => {\n    // This function run when the things we are\n    // watching change\n    setInputs(initial)\n  }, [initial]);\n\n  function handleChange(e) {\n    let { type, name, value } = e.target;\n    // change input for price in number type\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    // for files input\n    if (type === 'file') {\n      [value] = e.target.files;\n    }\n\n    setInputs({\n      // copy the existing state\n      ...inputs,\n      [name]: value,\n    });\n  }\n\n  // reset to default\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  // clear form\n  function clearForm() {\n    // set values in entries array to empty string, after create object from new entries(empty values)\n    const blankState = Object.fromEntries(\n      Object.entries(inputs).map(([key, value]) => [key, ''])\n    );\n    setInputs(blankState);\n  }\n\n  // return the things we want to surface from this custom hook\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}