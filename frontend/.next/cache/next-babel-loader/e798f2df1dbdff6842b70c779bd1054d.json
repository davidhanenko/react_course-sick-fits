{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/Files/Learning/React/Advanced-React-master/sick-fits/frontend/components/Checkout.js\";\nimport { useMutation } from '@apollo/client';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport gql from 'graphql-tag';\nimport nProgress from 'nprogress';\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport SickButton from './styles/SickButton';\nconst CheckoutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckoutFormStyles\",\n  componentId: \"sc-10mtoy5-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.04);border:1px solid rgba(0,0,0,0.06);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]);\nconst CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION($token: String!) {\n    checkout(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        name\n      }\n    }\n  }\n`; // Stripes\n\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState();\n  const stripe = useStripe();\n  const elements = useElements();\n  const router = use;\n  const [checkout, {\n    error: graphQlError\n  }] = useMutation(CREATE_ORDER_MUTATION);\n\n  async function handleSubmit(e) {\n    // 1. Stop form from submiting & turn the loader on\n    e.preventDefault();\n    setLoading(true); // 2. Start the page transition\n\n    nProgress.start(); // 3. Create the payment method via stripe(Token comes back here if successful)\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    }); // 4. Handle any errors from Stripe\n\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return; // Stop the checkout from happening\n    } // 5. Send the token from step 3 to uur keystone server, via a custom mutation\n\n\n    const order = await checkout({\n      variables: {\n        token: paymentMethod.id\n      }\n    });\n    console.log('Order:');\n    console.log(order); // 6. Change the page to view the order\n    // 7. Close the cart\n    // 8. Turn the loader off\n\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return /*#__PURE__*/_jsxDEV(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this), graphQlError && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: graphQlError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SickButton, {\n      children: \"Check Out Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\nexport { Checkout };","map":{"version":3,"sources":["/Volumes/Files/Learning/React/Advanced-React-master/sick-fits/frontend/components/Checkout.js"],"names":["useMutation","CardElement","Elements","useElements","useStripe","loadStripe","gql","nProgress","useState","styled","SickButton","CheckoutFormStyles","form","CREATE_ORDER_MUTATION","stripeLib","process","env","NEXT_PUBLIC_STRIPE_KEY","CheckoutForm","error","setError","loading","setLoading","stripe","elements","router","use","checkout","graphQlError","handleSubmit","e","preventDefault","start","paymentMethod","createPaymentMethod","type","card","getElement","done","order","variables","token","id","console","log","fontSize","message","Checkout"],"mappings":"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","sourcesContent":["import { useMutation } from '@apollo/client';\nimport {\n  CardElement,\n  Elements,\n  useElements,\n  useStripe,\n} from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport gql from 'graphql-tag';\nimport nProgress from 'nprogress';\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport SickButton from './styles/SickButton';\n\nconst CheckoutFormStyles = styled.form`\n  box-shadow: 0 1px 2px 2px rgba(0, 0, 0, 0.04);\n  border: 1px solid rgba(0, 0, 0, 0.06);\n  border-radius: 5px;\n  padding: 1rem;\n  display: grid;\n  grid-gap: 1rem;\n`;\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION($token: String!) {\n    checkout(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        name\n      }\n    }\n  }\n`;\n\n// Stripes\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState();\n  const stripe = useStripe();\n  const elements = useElements();\n  const router = use\n  const [checkout, { error: graphQlError }] = useMutation(\n    CREATE_ORDER_MUTATION\n  );\n\n  async function handleSubmit(e) {\n    // 1. Stop form from submiting & turn the loader on\n    e.preventDefault();\n\n    setLoading(true);\n\n    // 2. Start the page transition\n    nProgress.start();\n\n    // 3. Create the payment method via stripe(Token comes back here if successful)\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n    });\n\n    // 4. Handle any errors from Stripe\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return; // Stop the checkout from happening\n    }\n    // 5. Send the token from step 3 to uur keystone server, via a custom mutation\n    const order = await checkout({\n      variables: {\n        token: paymentMethod.id,\n      },\n    });\n    console.log('Order:');\n    console.log(order);\n    // 6. Change the page to view the order\n\n\n    // 7. Close the cart\n    // 8. Turn the loader off\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return (\n    <CheckoutFormStyles onSubmit={handleSubmit}>\n      {error && <p style={{ fontSize: 12 }}>{error.message}</p>}\n      {graphQlError && <p style={{ fontSize: 12 }}>{graphQlError.message}</p>}\n      <CardElement />\n      <SickButton>Check Out Now</SickButton>\n    </CheckoutFormStyles>\n  );\n}\n\nfunction Checkout() {\n  return (\n    <Elements stripe={stripeLib}>\n      <CheckoutForm />\n    </Elements>\n  );\n}\n\nexport { Checkout };\n"]},"metadata":{},"sourceType":"module"}