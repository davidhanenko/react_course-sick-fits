{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    // tells Apollo we will take care of everything\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      // console.log(existing, args, cache);\n      var skip = args.skip,\n          first = args.first; // Read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // Check if we have existing values & filter undefined values\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      });\n\n      if (items.length !== first) {// We don't habe any items\n      } // First thing it does, it asks the read function for those items\n      // Wecan do 2 things:\n      // 1st - return the items because they are already in the cache\n      // 2nd - return false from here (network requestr)\n\n    },\n    merge: function merge() {// This runs when the Apollo client comes back from the network with our products\n    }\n  };\n}","map":{"version":3,"sources":["/Volumes/Files/Learning/React/Advanced-React-master/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AACW;AAChBC,IAAAA,IAFK,kBAEgC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACnC;AADmC,UAE3BC,IAF2B,GAEXF,IAFW,CAE3BE,IAF2B;AAAA,UAErBC,KAFqB,GAEXH,IAFW,CAErBG,KAFqB,EAInC;;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARmC,CAUnC;;AACA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd;;AACE,UAAGH,KAAK,CAACI,MAAN,KAAiBd,KAApB,EAA2B,CACzB;AACD,OAdgC,CAgBnC;AACA;AACA;AACA;;AACD,KAtBI;AAuBLe,IAAAA,KAvBK,mBAuBG,CACN;AACD;AAzBI,GAAP;AA2BD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // tells Apollo we will take care of everything\n    read(existing = [], { args, cache }) {\n      // console.log(existing, args, cache);\n      const { skip, first } = args;\n\n      // Read the number of items on the page from the cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      // Check if we have existing values & filter undefined values\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n        if(items.length !== first) {\n          // We don't habe any items\n        }\n\n      // First thing it does, it asks the read function for those items\n      // Wecan do 2 things:\n      // 1st - return the items because they are already in the cache\n      // 2nd - return false from here (network requestr)\n    },\n    merge() {\n      // This runs when the Apollo client comes back from the network with our products\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}