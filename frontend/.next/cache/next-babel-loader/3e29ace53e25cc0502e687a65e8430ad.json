{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // tells Apollo we will take care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      // console.log(existing, args, cache);\n      const {\n        skip,\n        first\n      } = args; // Read the number of items on the page from the cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // Check if we have existing values & filter undefined values\n\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length !== first) {\n        // We don't habe any items, we must go to the network to fetch them\n        return false;\n      } // if there are items - just return them from cashe\n\n\n      if (items.length) {\n        console.log(`There are ${items.length} items in the cache. Gonna send them to apollo`);\n        return items;\n      }\n\n      return false; // falback to network\n      // First thing it does, it asks the read function for those items\n      // Wecan do 2 things:\n      // 1st - return the items because they are already in the cache\n      // 2nd - return false from here (network requestr)\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      // This runs when the Apollo client comes back from the network with our products\n      console.log(`Merging items from the network - ${incoming.length}`);\n      const {\n        skip,\n        first\n      } = args;\n      const merged = existing ? existing.sclice(0) : [];\n\n      for (let i = skip; i < incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged);\n      return merged;\n    }\n\n  };\n}","map":{"version":3,"sources":["/Volumes/Files/Learning/React/Advanced-React-master/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","console","log","merge","incoming","merged","sclice","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;;AACW;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACnC;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CAFmC,CAInC;;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,YAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARmC,CAUnC;;AACA,YAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OAfkC,CAiBnC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBC,QAAAA,OAAO,CAACC,GAAR,CACG,aAAYN,KAAK,CAACI,MAAO,gDAD5B;AAGA,eAAOJ,KAAP;AACD;;AAED,aAAO,KAAP,CAzBmC,CAyBrB;AAEd;AACA;AACA;AACA;AACD,KAjCI;;AAkCLO,IAAAA,KAAK,CAACrB,QAAD,EAAWsB,QAAX,EAAqB;AAAErB,MAAAA;AAAF,KAArB,EAA+B;AAClC;AAEAkB,MAAAA,OAAO,CAACC,GAAR,CAAa,oCAAmCE,QAAQ,CAACJ,MAAO,EAAhE;AAEA,YAAM;AAAEf,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB;AAEA,YAAMsB,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACwB,MAAT,CAAgB,CAAhB,CAAH,GAAwB,EAA/C;;AAEA,WAAK,IAAIC,CAAC,GAAGtB,IAAb,EAAmBsB,CAAC,GAAGH,QAAQ,CAACJ,MAAhC,EAAwC,EAAEO,CAA1C,EAA6C;AAC3CF,QAAAA,MAAM,CAACE,CAAD,CAAN,GAAYH,QAAQ,CAACG,CAAC,GAAGtB,IAAL,CAApB;AACD;;AAEDgB,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACA,aAAOA,MAAP;AACD;;AAjDI,GAAP;AAmDD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // tells Apollo we will take care of everything\n    read(existing = [], { args, cache }) {\n      // console.log(existing, args, cache);\n      const { skip, first } = args;\n\n      // Read the number of items on the page from the cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      // Check if we have existing values & filter undefined values\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      if (items.length !== first) {\n        // We don't habe any items, we must go to the network to fetch them\n        return false;\n      }\n\n      // if there are items - just return them from cashe\n      if (items.length) {\n        console.log(\n          `There are ${items.length} items in the cache. Gonna send them to apollo`\n        );\n        return items;\n      }\n\n      return false; // falback to network\n\n      // First thing it does, it asks the read function for those items\n      // Wecan do 2 things:\n      // 1st - return the items because they are already in the cache\n      // 2nd - return false from here (network requestr)\n    },\n    merge(existing, incoming, { args }) {\n      // This runs when the Apollo client comes back from the network with our products\n\n      console.log(`Merging items from the network - ${incoming.length}`);\n\n      const { skip, first } = args;\n\n      const merged = existing ? existing.sclice(0) : [];\n\n      for (let i = skip; i < incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged);\n      return merged;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}