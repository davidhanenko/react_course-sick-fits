{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nexport default function useForm(initial = {}) {\n  // create a state object for uor inputs\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n\n  function handleChange(e) {\n    let {\n      type,\n      name,\n      value\n    } = e.target; // change input for price in number type\n\n    if (type === 'number') {\n      value = parseInt(value);\n    } // for files input\n\n\n    if (type === 'file') {\n      value[0] = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  } // reset to default\n\n\n  function resetForm() {\n    setInputs(initial);\n  } // clear form\n\n\n  const blankState = Object.fromObject.entries(inputs).map(([key, value]) => [key, '']); // return the things we want to surface from this custom hook\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    blankState\n  };\n}","map":{"version":3,"sources":["/Volumes/Files/Learning/React/Advanced-React-master/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","type","name","value","target","parseInt","files","resetForm","blankState","Object","fromObject","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA+B;AAC5C;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC;;AAEA,WAASG,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAwBH,CAAC,CAACI,MAA9B,CADuB,CAEvB;;AACA,QAAIH,IAAI,KAAK,QAAb,EAAuB;AACrBE,MAAAA,KAAK,GAAGE,QAAQ,CAACF,KAAD,CAAhB;AACD,KALsB,CAOvB;;;AACA,QAAIF,IAAI,KAAK,MAAb,EAAqB;AACnBE,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWH,CAAC,CAACI,MAAF,CAASE,KAApB;AACD;;AAEDR,IAAAA,SAAS,iCAEJD,MAFI;AAGP,OAACK,IAAD,GAAQC;AAHD,OAAT;AAKD,GArB2C,CAuB5C;;;AACA,WAASI,SAAT,GAAqB;AACnBT,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD,GA1B2C,CA4B5C;;;AACA,QAAMY,UAAU,GAAGC,MAAM,CAACC,UAAP,CAAkBC,OAAlB,CAA0Bd,MAA1B,EAAkCe,GAAlC,CAAsC,CAAC,CAACC,GAAD,EAAMV,KAAN,CAAD,KAAkB,CAACU,GAAD,EAAM,EAAN,CAAxD,CAAnB,CA7B4C,CA+B5C;;AACA,SAAO;AACLhB,IAAAA,MADK;AAELE,IAAAA,YAFK;AAGLQ,IAAAA,SAHK;AAILC,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useState } from 'react';\n\nexport default function useForm(initial = {}) {\n  // create a state object for uor inputs\n  const [inputs, setInputs] = useState(initial);\n\n  function handleChange(e) {\n    let { type, name, value } = e.target;\n    // change input for price in number type\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    // for files input\n    if (type === 'file') {\n      value[0] = e.target.files;\n    }\n\n    setInputs({\n      // copy the existing state\n      ...inputs,\n      [name]: value,\n    });\n  }\n\n  // reset to default\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  // clear form\n  const blankState = Object.fromObject.entries(inputs).map(([key, value]) => [key, '']);\n\n  // return the things we want to surface from this custom hook\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    blankState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}