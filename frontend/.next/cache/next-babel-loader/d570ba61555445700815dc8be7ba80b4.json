{"ast":null,"code":"import _slicedToArray from \"/Volumes/Files/Learning/React/Advanced-React-master/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Volumes/Files/Learning/React/Advanced-React-master/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nexport default function useForm() {\n  _s();\n\n  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  // create a state object for uor inputs\n  var _useState = useState(initial),\n      inputs = _useState[0],\n      setInputs = _useState[1];\n\n  function handleChange(e) {\n    var _e$target = e.target,\n        type = _e$target.type,\n        name = _e$target.name,\n        value = _e$target.value; // change input for price in number type\n\n    if (type === 'number') {\n      value = parseInt(value);\n    } // for files input\n\n\n    if (type === 'file') {\n      value[0] = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, _defineProperty({}, name, value)));\n  } // reset to default\n\n\n  function resetForm() {\n    setInputs(initial);\n  } // clear form\n\n\n  var blankState = Object.entries(inputs).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return [key, ''];\n  }); // return the things we want to surface from this custom hook\n\n  return {\n    inputs: inputs,\n    handleChange: handleChange,\n    resetForm: resetForm,\n    b: b\n  };\n}\n\n_s(useForm, \"0tjT+aoDVbAe0wsQZsq9AKLCE20=\");","map":{"version":3,"sources":["/Volumes/Files/Learning/React/Advanced-React-master/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","target","type","name","value","parseInt","files","resetForm","blankState","Object","entries","map","key","b"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,GAA+B;AAAA;;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC5C;AAD4C,kBAEhBF,QAAQ,CAACE,OAAD,CAFQ;AAAA,MAErCC,MAFqC;AAAA,MAE7BC,SAF6B;;AAI5C,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AAAA,oBACKA,CAAC,CAACC,MADP;AAAA,QACjBC,IADiB,aACjBA,IADiB;AAAA,QACXC,IADW,aACXA,IADW;AAAA,QACLC,KADK,aACLA,KADK,EAEvB;;AACA,QAAIF,IAAI,KAAK,QAAb,EAAuB;AACrBE,MAAAA,KAAK,GAAGC,QAAQ,CAACD,KAAD,CAAhB;AACD,KALsB,CAOvB;;;AACA,QAAIF,IAAI,KAAK,MAAb,EAAqB;AACnBE,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWJ,CAAC,CAACC,MAAF,CAASK,KAApB;AACD;;AAEDR,IAAAA,SAAS,iCAEJD,MAFI,2BAGNM,IAHM,EAGCC,KAHD,GAAT;AAKD,GArB2C,CAuB5C;;;AACA,WAASG,SAAT,GAAqB;AACnBT,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD,GA1B2C,CA4B5C;;;AACA,MAAMY,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAeb,MAAf,EAAuBc,GAAvB,CAA2B;AAAA;AAAA,QAAEC,GAAF;AAAA,QAAOR,KAAP;;AAAA,WAAkB,CAACQ,GAAD,EAAM,EAAN,CAAlB;AAAA,GAA3B,CAAnB,CA7B4C,CA+B5C;;AACA,SAAO;AACLf,IAAAA,MAAM,EAANA,MADK;AAELE,IAAAA,YAAY,EAAZA,YAFK;AAGLQ,IAAAA,SAAS,EAATA,SAHK;AAILM,IAAAA,CAAC,EAADA;AAJK,GAAP;AAMD;;GAtCuBlB,O","sourcesContent":["import { useState } from 'react';\n\nexport default function useForm(initial = {}) {\n  // create a state object for uor inputs\n  const [inputs, setInputs] = useState(initial);\n\n  function handleChange(e) {\n    let { type, name, value } = e.target;\n    // change input for price in number type\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    // for files input\n    if (type === 'file') {\n      value[0] = e.target.files;\n    }\n\n    setInputs({\n      // copy the existing state\n      ...inputs,\n      [name]: value,\n    });\n  }\n\n  // reset to default\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  // clear form\n  const blankState = Object.entries(inputs).map(([key, value]) => [key, '']);\n\n  // return the things we want to surface from this custom hook\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    b\n  };\n}\n"]},"metadata":{},"sourceType":"module"}