{"ast":null,"code":"import _defineProperty from \"/Volumes/Files/Learning/React/Advanced-React-master/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nexport default function useForm() {\n  _s();\n\n  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  // create a state object for uor inputs\n  var _useState = useState(initial),\n      inputs = _useState[0],\n      setInputs = _useState[1];\n\n  var _e$target = e.target,\n      type = _e$target.type,\n      name = _e$target.name,\n      value = _e$target.value;\n\n  function handleChange(e) {\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, _defineProperty({}, e.target.name, e.target.value)));\n  } // return the things we want to surface from this custom hook\n\n\n  return {\n    inputs: inputs,\n    handleChange: handleChange\n  };\n}\n\n_s(useForm, \"0tjT+aoDVbAe0wsQZsq9AKLCE20=\");","map":{"version":3,"sources":["/Volumes/Files/Learning/React/Advanced-React-master/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","e","target","type","name","value","handleChange"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,GAA+B;AAAA;;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC5C;AAD4C,kBAEhBF,QAAQ,CAACE,OAAD,CAFQ;AAAA,MAErCC,MAFqC;AAAA,MAE7BC,SAF6B;;AAAA,kBAGdC,CAAC,CAACC,MAHY;AAAA,MAGpCC,IAHoC,aAGpCA,IAHoC;AAAA,MAG9BC,IAH8B,aAG9BA,IAH8B;AAAA,MAGxBC,KAHwB,aAGxBA,KAHwB;;AAK5C,WAASC,YAAT,CAAsBL,CAAtB,EAAyB;AACvBD,IAAAA,SAAS,iCAEJD,MAFI,2BAGNE,CAAC,CAACC,MAAF,CAASE,IAHH,EAGUH,CAAC,CAACC,MAAF,CAASG,KAHnB,GAAT;AAKD,GAX2C,CAa5C;;;AACA,SAAO;AACLN,IAAAA,MAAM,EAANA,MADK;AAELO,IAAAA,YAAY,EAAZA;AAFK,GAAP;AAID;;GAlBuBT,O","sourcesContent":["import { useState } from 'react';\n\nexport default function useForm(initial = {}) {\n  // create a state object for uor inputs\n  const [inputs, setInputs] = useState(initial);\n  const { type, name, value } = e.target;\n\n  function handleChange(e) {\n    setInputs({\n      // copy the existing state\n      ...inputs,\n      [e.target.name]: e.target.value,\n    });\n  }\n\n  // return the things we want to surface from this custom hook\n  return {\n    inputs,\n    handleChange,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}